package uk.ac.bris.cs.scotlandyard.ui.ai;

import uk.ac.bris.cs.scotlandyard.model.Move;
import uk.ac.bris.cs.scotlandyard.ui.gamemonitor.GameMonitorView;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * A tree of possible gameStates, generated by a GameTreeBuilder.
 * Structure is recursive so each tree can be thought of as a node.
 */
public class GameTree {
    private List<GameTree> childTrees = new ArrayList<>();
    private List<Move> childMoves = new ArrayList<>();
    private GameState state;
    private int score;
    private boolean isMrXRound;
    private boolean isDeadNode;

    /**
     * Make a new GameTree.
     * @param state The current GameState.
     * @param isMrXRound
     */
    public GameTree(GameState state, boolean isMrXRound) {
        this.state = state;
        this.isMrXRound = isMrXRound;
        this.isDeadNode = false;
    }

    /**
     * Adds a child tree to the GameTree.
     * @param state The state of the child.
     * @param move The move used to create that state.
     */
    public void addChild(GameState state, Move move) {
        this.childTrees.add(new GameTree(state,!this.isMrXRound));
        this.childMoves.add(move);
    }

    /**
     * Adds a child tree to the GameTree.
     * @param state The state of the child.
     * @param moves The set of moves used to create the state.
     */
    public void addChild(GameState state, Set<Move> moves) {
        this.childTrees.add(new GameTree(state,!this.isMrXRound));
        this.childMoves.addAll(moves);
    }

    /**
     * Removes all child trees from a GameTree.
     */
    public void removeChildren() {
        this.childTrees.clear();
    }

    /**
     * The state at the tree is where MrX is deciding a move.
     * @return True if the state at the tree is where MrX is deciding a move.
     */
    public boolean isMrXRound() {
        return this.isMrXRound;
    }

    /**
     * Returns the child trees of a GameTree.
     * @return The child trees of a GameTree.
     */
    public List<GameTree> getChildTrees() {
        return this.childTrees;
    }

    /**
     * Returns the move used to create a child tree.
     * @param tree The child tree.
     * @return The move that created tree.
     */
    public Move getMove(GameTree tree) {
        return childMoves.get(childTrees.indexOf(tree));
    }

    /**
     * Sets the score of a this game tree.
     * @param score The score of this game tree.
     */
    public void setScore(int score) {
        this.score = score;
    }

    /**
     * /**
     * Returns the score of a this game tree.
     * @return The score of this game tree.
     */
    public int getScore() {
        return this.score;
    }

    /**
     * Returns the GameState of this tree.
     * @return The GameState of this tree.
     */
    public GameState getState() {
        return this.state;
    }

    /**
     * Returns whether this tree (node) is a dead node (has been pruned).
     * @return True if the tree (node) has been pruned.
     */
    public boolean isDeadNode() {
        return this.isDeadNode;
    }

    /**
     * Sets whether the tree is a dead node.
     * @param isDeadNode Whether the node is dead.
     */
    public void isDeadNode(boolean isDeadNode) {
        this.isDeadNode = isDeadNode;
    }

    /**
     * Accepts a tree visitor on the node.
     * @param visitor A tree visitor.
     */
    public void accept(TreeVisitor visitor) {
        visitor.visit(this);
    }
}
